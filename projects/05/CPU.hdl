// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    
    //control
    And16(a=instruction, b=instruction, out[15]=cinst, out[12]=a, out[11]=c1,
        out[10]=c2, out[9]=c3, out[8]=c4, out[7]=c5, out[6]=c6, out[5]=d1, out[4]=d2,
        out[3]=d3, out[2]=j1, out[1]=j2, out[0]=j3);


    Not(in=cinst, out=notreg);

    //WriteM output C7
    And(a=d3, b=cinst, out=writeM);
    
    //First Mux C1
    Mux16(a=ALUout, b=instruction, sel=notreg, out=aReg);

    //A Register C2 ...and... AddressM output
    Or(a=d1, b=notreg, out=orD1);
    ARegister(in=aReg, load=orD1, out=Aout, out[0..14]=addressM);

    //D Register C3
    And(a=d2, b=cinst, out=andD2);
    DRegister(in=ALUout, load=andD2, out=Dout);

    //Second Mux C5
    Mux16(a=Aout, b=inM, sel=a, out=ALUY);

    //ALU C4
    ALU(x=Dout, y=ALUY,
        zx=c1,
        nx=c2,
        zy=c3,
        ny=c4,
        f=c5,
        no=c6,
        out=outM, out=ALUout,
        //C6
        zr=zr,ng=ng);


    //C8 is everything below
    //JMP
    And(a=j1, b=j2, out=andj1j2);
    And(a=j3, b=andj1j2, out=jmp);
    
    //JEQ
    And(a=zr, b=j2, out=equal);

    //JGT
    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);
    And(a=notzr, b=notng, out=andngzr);
    And(a=j3, b=andngzr, out=greater);

    //JLT
    And(a=ng, b=j1, out=less);

    //Load
    Or8Way(in[0]=jmp, in[1]=greater, in[2]=less, in[3]=equal, in[4..7]=false, out=load, out=aluload);
    And(a=cinst, b=aluload, out=pcload);

    //Inc
    Not(in=pcload, out=inc);
    
    //PC
    PC(in=Aout, load=pcload, inc=inc,reset=reset, out[0..14]=pc);
}